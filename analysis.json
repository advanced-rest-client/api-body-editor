{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`api-body-editor`\nRenders different types of body editors. It works with AMF data model\nbut can be used separately.\n\n## AMF support\n\nThe element supports [AMF](https://github.com/mulesoft/amf/)\n`json-ld` model. The model can be generated from OAS or RAML spec by\ndefault and other specs with appropriate plugin.\n\nThe element accepts `http://www.w3.org/ns/hydra/core#Operation`,\n`http://raml.org/vocabularies/http#Request` or array of\n`http://raml.org/vocabularies/http#Payload` definitions in AMF\nvocabulary.\n\nWhen AMF model is accepted it alters the UI to render only allowed\nby the spec content types and therefore editors.\n\n## Optional dependency for AMF\n\n`advanced-rest-client/api-view-model-transformer` is not imported by\ndefault to the element so applications that do not use AMF do not pay the\ncost of including the transformer. The transformer is a required\ndependency of the element, though.\n\nBe advised, **build process won't pick up the dependency** while it is\nincluded at run time. Therefore you have add the element to the build\nprocess manualy.",
      "summary": "",
      "path": "api-body-editor.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\""
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "selected",
          "type": "number",
          "description": "Currently selected editor.\n\n- 0 for Raw editor\n- 1 for Form data\n- 2 for Multipart\n- 3 for File",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selectedChanged\""
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "value",
          "type": "(String | FormData | File)",
          "description": "A HTTP body.\n\nDepending of current editor selection the type can vary.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\""
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "contentType",
          "type": "string",
          "description": "When set it will attempt to run associated code mirror mode\n(raw editor).\nThis element listens for the `content-type-changed` event and when\nhandled it will automatically update content type and `mode`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_contentTypeChanged\""
            }
          }
        },
        {
          "name": "amfModel",
          "type": "Object",
          "description": "AMF json/ld model for body.\nWhen set it resets editor settings and transform it to work with\ndata types defined in AMF only.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 10
            },
            "end": {
              "line": 175,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_amfChanged\""
            }
          }
        },
        {
          "name": "_effectiveModel",
          "type": "Object",
          "description": "Computed final model for payload.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 10
            },
            "end": {
              "line": 177,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "hasAmfModel",
          "type": "Object",
          "description": "Computed value, `true` when `amfModel` is set.\nThis controls how the view is rendered. AMF model has limited\nnumber of media types supported by the API. When not existing\nthe edtior renders all possible types.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 190,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "noTextInput",
          "type": "boolean",
          "description": "Computed value, if set then raw text input is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 10
            },
            "end": {
              "line": 192,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "noFormData",
          "type": "boolean",
          "description": "Computed value, if set then form data input is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 194,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "noMultipart",
          "type": "boolean",
          "description": "Computed value, if set then multipart input is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "noFile",
          "type": "boolean",
          "description": "Computed value, if set then file input is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 10
            },
            "end": {
              "line": 198,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "editorSelectorHidden",
          "type": "boolean",
          "description": "Computed value, true if the editor type selector is hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 10
            },
            "end": {
              "line": 203,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "allowHideOptional",
          "type": "boolean",
          "description": "If set it computes `hasOptional` property and shows checkbox in the\nform to show / hide optional properties.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 10
            },
            "end": {
              "line": 211,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_allowDisableParamsChanged\""
            }
          }
        },
        {
          "name": "allowDisableParams",
          "type": "boolean",
          "description": "If set, enable / disable param checkbox is rendered next to each\nform item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 10
            },
            "end": {
              "line": 219,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_allowDisableParamsChanged\""
            }
          }
        },
        {
          "name": "allowCustom",
          "type": "boolean",
          "description": "When set, renders \"add custom\" item button.\nIf the element is to be used withouth AMF model this should always\nbe enabled. Otherwise users won't be able to add a parameter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 10
            },
            "end": {
              "line": 228,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_allowCustomChanged\""
            }
          }
        },
        {
          "name": "narrow",
          "type": "boolean",
          "description": "Renders items in \"narrow\" view",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 10
            },
            "end": {
              "line": 235,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_narrowChanged\""
            }
          }
        },
        {
          "name": "mimeTypes",
          "type": "Array",
          "description": "List of supported mime types by this endpoint.\nThis information is read from AMF data model.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "selectedMimeType",
          "type": "Object",
          "description": "RAML's type definition.\nA JSON editor uses it to create a schema definition (as a JSON object of {name: type}) to\ndisplay autosuggestions.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 10
            },
            "end": {
              "line": 253,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "singleMimeType",
          "type": "Object",
          "description": "Computed value.\nIt's `true` when the endpint supports single mime type.\nIn this case it won't render type selector.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 10
            },
            "end": {
              "line": 264,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 86,
              "column": 5
            },
            "end": {
              "line": 91,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 6
            },
            "end": {
              "line": 297,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ]
        },
        {
          "name": "_computeHasAmf",
          "description": "Computes value for `hasAmfModel`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 6
            },
            "end": {
              "line": 310,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amf",
              "type": "?Object",
              "description": "AMF model for body."
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "_ctHandler",
          "description": "Handler for content type changed event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 315,
              "column": 6
            },
            "end": {
              "line": 317,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ]
        },
        {
          "name": "_contentTypeChanged",
          "description": "Handler for content type change.\nUpdates state of the UI depending on AMF model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 325,
              "column": 6
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType",
              "type": "String",
              "description": "New content type value."
            },
            {
              "name": "oldValue",
              "type": "String",
              "description": "Previous value"
            }
          ]
        },
        {
          "name": "_updateAmfSelectedMime",
          "description": "Updates selected model for AMF.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 6
            },
            "end": {
              "line": 354,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasAmfModel"
            },
            {
              "name": "contentType",
              "type": "String",
              "description": "New content type value."
            },
            {
              "name": "selected"
            }
          ]
        },
        {
          "name": "_hideAllEditors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 361,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_renderAllEditors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 363,
              "column": 6
            },
            "end": {
              "line": 368,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateEditorsState",
          "description": "Updates editors availability state depending on content type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 374,
              "column": 6
            },
            "end": {
              "line": 408,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType",
              "type": "String",
              "description": "New content type value."
            },
            {
              "name": "oldValue",
              "type": "String",
              "description": "Previous value"
            }
          ]
        },
        {
          "name": "_selectedChanged",
          "description": "Replaces active body editor with new one.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 412,
              "column": 6
            },
            "end": {
              "line": 422,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            },
            {
              "name": "oldValue"
            }
          ]
        },
        {
          "name": "_notifyBodyChanged",
          "description": "Notifies application about body change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 6
            },
            "end": {
              "line": 437,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | FormData | File | undefined)",
              "description": "Value to notify"
            }
          ]
        },
        {
          "name": "__removeExistingPanel",
          "description": "Removes any existing body panel from local DOM.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 441,
              "column": 6
            },
            "end": {
              "line": 455,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "__createBodyPanel",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 457,
              "column": 6
            },
            "end": {
              "line": 467,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ]
        },
        {
          "name": "__addCommonProperties",
          "description": "Adds shared properties for all panels.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 474,
              "column": 6
            },
            "end": {
              "line": 483,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "panel",
              "type": "HTMLElement"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Body type."
            }
          ]
        },
        {
          "name": "_createRawPanel",
          "description": "Creates instance of Raw body panel and adds it to local DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 487,
              "column": 6
            },
            "end": {
              "line": 491,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createFormDataPanel",
          "description": "Creates instance of Raw body panel and adds it to local DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 496,
              "column": 6
            },
            "end": {
              "line": 500,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createFilePanel",
          "description": "Creates instance of Raw body panel and adds it to local DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 505,
              "column": 6
            },
            "end": {
              "line": 509,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_createMultipartPanel",
          "description": "Creates instance of Raw body panel and adds it to local DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 514,
              "column": 6
            },
            "end": {
              "line": 518,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_panelValueChanged",
          "description": "Handler for the `value-changed` event dispatched by an editor panel.\nUpdates this element value reported back to the application and\ndispatches `body-value-changed` custom event so elements without\ndirect access to this element can act upon new information.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 528,
              "column": 6
            },
            "end": {
              "line": 533,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ]
        },
        {
          "name": "_attachValues",
          "description": "Attaches value and value change listeners to current editor\nafter it's created.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 538,
              "column": 6
            },
            "end": {
              "line": 548,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_propagateModel",
          "description": "Attaches data model to an editor when content type changes.\n\nCalee must import transformer element before calling this function.\n\nCurrently only `form-data-editor` and `multipart-payload-editor`\nsupport amf data model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 560,
              "column": 6
            },
            "end": {
              "line": 590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved when model is set."
          }
        },
        {
          "name": "_analyticsEvent",
          "description": "Dispatches analytics event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 612,
              "column": 6
            },
            "end": {
              "line": 624,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "category",
              "type": "String",
              "description": "Event category"
            },
            {
              "name": "action",
              "type": "String",
              "description": "Event action"
            },
            {
              "name": "label",
              "type": "String",
              "description": "Event label"
            }
          ]
        },
        {
          "name": "_payloadKeyDown",
          "description": "Dispatches `send-request` custom event when the user pressed\n`meta+enter` on Mac or `ctrl+enter` otherwise keys combination.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 631,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ]
        },
        {
          "name": "_computeEditorSelectorHidden",
          "description": "Computes a value of the hidden attribute of the editory type selector.\nSome content types are supported by only one type of the editor so in\nthis cases the editor should be hidden.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 654,
              "column": 6
            },
            "end": {
              "line": 671,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType",
              "type": "String",
              "description": "Current content type."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true to hide the selector."
          }
        },
        {
          "name": "_propertyChangeHandler",
          "description": "Updates property value on current panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 677,
              "column": 6
            },
            "end": {
              "line": 683,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            },
            {
              "name": "value",
              "type": "any",
              "description": "New value to set."
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "Updates value of the panel if `value` change and it is not\ninternal change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 690,
              "column": 6
            },
            "end": {
              "line": 695,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | FormData | File)",
              "description": "New value to set."
            }
          ]
        },
        {
          "name": "_allowHideOptionalChanged",
          "description": "Updates `allowHideOptional` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 701,
              "column": 6
            },
            "end": {
              "line": 703,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ]
        },
        {
          "name": "_allowDisableParamsChanged",
          "description": "Updates `allowDisableParams` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 709,
              "column": 6
            },
            "end": {
              "line": 711,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ]
        },
        {
          "name": "_allowCustomChanged",
          "description": "Updates `allowCustom` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 717,
              "column": 6
            },
            "end": {
              "line": 719,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ]
        },
        {
          "name": "_narrowChanged",
          "description": "Updates `narrow` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 725,
              "column": 6
            },
            "end": {
              "line": 727,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ]
        },
        {
          "name": "_copyToClipboard",
          "description": "Coppies current body text value to clipboard.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 732,
              "column": 6
            },
            "end": {
              "line": 753,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_resetCopyButtonState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 755,
              "column": 6
            },
            "end": {
              "line": 757,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "button"
            }
          ]
        },
        {
          "name": "_amfChanged",
          "description": "A handler for `amfModel` property change.\nResets `mediaTypes` property as defined in the model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 764,
              "column": 6
            },
            "end": {
              "line": 781,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "(Array | Object)",
              "description": "Passed model"
            }
          ]
        },
        {
          "name": "_ensurePayloadModel",
          "description": "Ensures that the passed model is an array of\n`http://raml.org/vocabularies/http#Payload`\nin the AMF vocabulary.\nThe element accepts `http://www.w3.org/ns/hydra/core#Operation`,\n`http://raml.org/vocabularies/http#Request` or array of\n`http://raml.org/vocabularies/http#Payload` definitions.\nIt selectes the array from the model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 795,
              "column": 6
            },
            "end": {
              "line": 810,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "(Array | Object)",
              "description": "Passed model"
            }
          ],
          "return": {
            "type": "(Array | undefined)",
            "desc": "Payload model of undefined if the model\nis invalid for this element."
          }
        },
        {
          "name": "_modelHasType",
          "description": "Checks if a model has a type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 817,
              "column": 6
            },
            "end": {
              "line": 820,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "Model to test"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Type name"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if model has a type."
          }
        },
        {
          "name": "_importTransformer",
          "description": "Imports `api-view-model-transformer` element to use it when\nAMF model is used.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 826,
              "column": 6
            },
            "end": {
              "line": 835,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_updateAmfMediaTypes",
          "description": "Creates a list of media types supported by the endpoint as defined in\nAPI spec file.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 841,
              "column": 6
            },
            "end": {
              "line": 859,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Array",
              "description": "List of `Payload` definitions"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 872,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ApiBodyEditor",
      "attributes": [
        {
          "name": "events-target",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "sourceRange": {
            "file": "bower_components/events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "selected",
          "description": "Currently selected editor.\n\n- 0 for Raw editor\n- 1 for Form data\n- 2 for Multipart\n- 3 for File",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "value",
          "description": "A HTTP body.\n\nDepending of current editor selection the type can vary.",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 10
            },
            "end": {
              "line": 155,
              "column": 11
            }
          },
          "metadata": {},
          "type": "(String | FormData | File)"
        },
        {
          "name": "content-type",
          "description": "When set it will attempt to run associated code mirror mode\n(raw editor).\nThis element listens for the `content-type-changed` event and when\nhandled it will automatically update content type and `mode`.",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 10
            },
            "end": {
              "line": 165,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "amf-model",
          "description": "AMF json/ld model for body.\nWhen set it resets editor settings and transform it to work with\ndata types defined in AMF only.",
          "sourceRange": {
            "start": {
              "line": 172,
              "column": 10
            },
            "end": {
              "line": 175,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "has-amf-model",
          "description": "Computed value, `true` when `amfModel` is set.\nThis controls how the view is rendered. AMF model has limited\nnumber of media types supported by the API. When not existing\nthe edtior renders all possible types.",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 190,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "no-text-input",
          "description": "Computed value, if set then raw text input is hidden",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 10
            },
            "end": {
              "line": 192,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "no-form-data",
          "description": "Computed value, if set then form data input is hidden",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 10
            },
            "end": {
              "line": 194,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "no-multipart",
          "description": "Computed value, if set then multipart input is hidden",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "no-file",
          "description": "Computed value, if set then file input is hidden",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 10
            },
            "end": {
              "line": 198,
              "column": 25
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "editor-selector-hidden",
          "description": "Computed value, true if the editor type selector is hidden.",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 10
            },
            "end": {
              "line": 203,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "allow-hide-optional",
          "description": "If set it computes `hasOptional` property and shows checkbox in the\nform to show / hide optional properties.",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 10
            },
            "end": {
              "line": 211,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "allow-disable-params",
          "description": "If set, enable / disable param checkbox is rendered next to each\nform item.",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 10
            },
            "end": {
              "line": 219,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "allow-custom",
          "description": "When set, renders \"add custom\" item button.\nIf the element is to be used withouth AMF model this should always\nbe enabled. Otherwise users won't be able to add a parameter.",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 10
            },
            "end": {
              "line": 228,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "narrow",
          "description": "Renders items in \"narrow\" view",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 10
            },
            "end": {
              "line": 235,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "mime-types",
          "description": "List of supported mime types by this endpoint.\nThis information is read from AMF data model.",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 10
            },
            "end": {
              "line": 244,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "selected-mime-type",
          "description": "RAML's type definition.\nA JSON editor uses it to create a schema definition (as a JSON object of {name: type}) to\ndisplay autosuggestions.",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 10
            },
            "end": {
              "line": 253,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "single-mime-type",
          "description": "Computed value.\nIt's `true` when the endpint supports single mime type.\nIn this case it won't render type selector.",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 10
            },
            "end": {
              "line": 264,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "body-value-changed",
          "description": "body-value-changed",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "send-request",
          "description": "send-request",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "api-body-editor",
      "mixins": [
        "ArcBehaviors.EventsTargetBehavior"
      ]
    }
  ]
}
