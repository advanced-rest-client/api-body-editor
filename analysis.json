{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "ApiElements",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "api-body-editor-amf-overlay.html",
        "start": {
          "line": 22,
          "column": 2
        },
        "end": {
          "line": 22,
          "column": 26
        }
      },
      "mixins": [
        {
          "description": "Adds AMF support to body editor.\n\nThis mixin's only purpose is to keep AMF support separated from the\nbody editor code so it's clearer to read it.",
          "summary": "",
          "path": "api-body-editor-amf-overlay.html",
          "properties": [
            {
              "name": "aware",
              "type": "string | null | undefined",
              "description": "`raml-aware` scope property to use.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "String"
                }
              }
            },
            {
              "name": "amfBody",
              "type": "Object",
              "description": "AMF json/ld model for body.\nWhen set it resets editor settings and transform it to work with\ndata types defined in AMF only.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 8
                },
                "end": {
                  "line": 54,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "_effectiveModel",
              "type": "Object | null | undefined",
              "description": "Computed final model for payload.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 8
                },
                "end": {
                  "line": 56,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "attributeType": "Object"
                }
              }
            },
            {
              "name": "hasAmfBody",
              "type": "Object",
              "description": "Computed value, `true` when `amfBody` is set.\nThis controls how the view is rendered. AMF model has limited\nnumber of media types supported by the API. When not existing\nthe edtior renders all possible types.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 8
                },
                "end": {
                  "line": 69,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Boolean"
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "mimeTypes",
              "type": "Array | null | undefined",
              "description": "List of supported mime types by this endpoint.\nThis information is read from AMF data model.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Array"
                }
              }
            },
            {
              "name": "singleMimeType",
              "type": "Object",
              "description": "Computed value.\nIt's `true` when the endpint supports single mime type.\nIn this case it won't render type selector.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true,
                  "attributeType": "Object"
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_computeHasAmf",
              "description": "Computes value for `hasAmfBody`.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 104,
                  "column": 4
                },
                "end": {
                  "line": 106,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "amf",
                  "type": "?Object",
                  "description": "AMF model for body."
                }
              ],
              "return": {
                "type": "Boolean"
              }
            },
            {
              "name": "_clearAmfSettings",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 108,
                  "column": 4
                },
                "end": {
                  "line": 110,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_amfChanged",
              "description": "Creates a debouncer for body change action so it can be sure that\n`amfModel` and `amfBody` properties are set.\n\nAfter debouncer timeout `__amfChanged()` is called with current value of\n`amfBody`",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 4
                },
                "end": {
                  "line": 128,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "__amfChanged",
              "description": "A handler for `amfBody` property change.\nResets `mediaTypes` property as defined in the model.",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 135,
                  "column": 4
                },
                "end": {
                  "line": 154,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "bodyShape",
                  "type": "(Array | Object)",
                  "description": "Passed model"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_ensurePayloadModel",
              "description": "Ensures that the passed model is an array of\n`http://raml.org/vocabularies/http#Payload`\nin the AMF vocabulary.\nThe element accepts `http://www.w3.org/ns/hydra/core#Operation`,\n`http://raml.org/vocabularies/http#Request` or array of\n`http://raml.org/vocabularies/http#Payload` definitions.\nIt selectes the array from the model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 169,
                  "column": 4
                },
                "end": {
                  "line": 189,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "(Array | Object)",
                  "description": "Passed model"
                }
              ],
              "return": {
                "type": "(Array | undefined)",
                "desc": "Payload model of undefined if the model\nis invalid for this element."
              }
            },
            {
              "name": "_updateAmfMediaTypes",
              "description": "Creates a list of media types supported by the endpoint as defined in\nAPI spec file.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 196,
                  "column": 4
                },
                "end": {
                  "line": 204,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Array",
                  "description": "List of `Payload` definitions"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_selectDefaultMediaType",
              "description": "Sets a content type property based on AMF mode's available options.\nIt sets the first defined media type in the model.\n\nThis function **always** triggers the change by clearing `contentType`\nfirst and then assigning new value.\n\nIf the AMF model is a file model then it sets `fileAccept` property",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 216,
                  "column": 4
                },
                "end": {
                  "line": 242,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "model",
                  "type": "Array",
                  "description": "List of `Payload` definitions"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_updatePanelAmf",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 244,
                  "column": 4
                },
                "end": {
                  "line": 258,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hasAmfBody"
                },
                {
                  "name": "contentType"
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_schemaForMedia",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 260,
                  "column": 4
                },
                "end": {
                  "line": 284,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mediaType"
                }
              ]
            },
            {
              "name": "_typeHasModel",
              "description": "Tests if the panel that supports given content-type supports data model.\nXML and JSON do not use view data model to render the view.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 294,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "contentType",
                  "type": "String",
                  "description": "A content type value to test"
                }
              ],
              "return": {
                "type": "Boolean",
                "desc": "True if the content type's panel support data model"
              }
            },
            {
              "name": "_updatePanelModel",
              "description": "Updates view model on panels that support the model.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 303,
                  "column": 4
                },
                "end": {
                  "line": 321,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "panel",
                  "type": "HTMLElement",
                  "description": "Current panel"
                },
                {
                  "name": "contentType",
                  "type": "String",
                  "description": "Current content type"
                },
                {
                  "name": "schema",
                  "type": "Object",
                  "description": "A schema for current payload."
                }
              ],
              "return": {
                "type": "void"
              }
            },
            {
              "name": "_getUnionObjectProperties",
              "description": "To simplify things, this searches for first **object** from the union type\ndefinition and returns its properties.\n\nThe component do not offer an UI to selected union type.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 331,
                  "column": 4
                },
                "end": {
                  "line": 351,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "schema",
                  "type": "Object",
                  "description": "Payload's schema definition"
                }
              ],
              "return": {
                "type": "(Array.<Object> | undefined)",
                "desc": "Properies of first object, if any."
              }
            },
            {
              "name": "_updatePanelValue",
              "description": "Updates panel value depending on examples or type schema availability.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 359,
                  "column": 4
                },
                "end": {
                  "line": 368,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "panel",
                  "type": "HTMLElement",
                  "description": "Current panel"
                },
                {
                  "name": "type",
                  "type": "String",
                  "description": "Current content type"
                },
                {
                  "name": "schema",
                  "type": "Object",
                  "description": "A schema for current payload."
                }
              ],
              "return": {
                "type": "void"
              }
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "privacy": "public",
          "name": "ApiElements.ApiBodyEditorAmfOverlay",
          "attributes": [
            {
              "name": "aware",
              "description": "`raml-aware` scope property to use.",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 21
                }
              },
              "metadata": {},
              "type": "string | null | undefined"
            },
            {
              "name": "amf-body",
              "description": "AMF json/ld model for body.\nWhen set it resets editor settings and transform it to work with\ndata types defined in AMF only.",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 8
                },
                "end": {
                  "line": 54,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "has-amf-body",
              "description": "Computed value, `true` when `amfBody` is set.\nThis controls how the view is rendered. AMF model has limited\nnumber of media types supported by the API. When not existing\nthe edtior renders all possible types.",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 8
                },
                "end": {
                  "line": 69,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "mime-types",
              "description": "List of supported mime types by this endpoint.\nThis information is read from AMF data model.",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Array | null | undefined"
            },
            {
              "name": "single-mime-type",
              "description": "Computed value.\nIt's `true` when the endpint supports single mime type.\nIn this case it won't render type selector.",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  ],
  "elements": [
    {
      "description": "`api-body-editor`\nRenders different types of body editors. It works with AMF data model\nbut can be used separately.\n\n## AMF support\n\nThe element supports [AMF](https://github.com/mulesoft/amf/)\n`json-ld` model. The model can be generated from OAS or RAML spec by\ndefault and other specs with appropriate plugin.\n\nThe element accepts `http://www.w3.org/ns/hydra/core#Operation`,\n`http://raml.org/vocabularies/http#Request` or array of\n`http://raml.org/vocabularies/http#Payload` definitions in AMF\nvocabulary.\n\nWhen AMF model is accepted it alters the UI to render only allowed\nby the spec content types and therefore editors.",
      "summary": "",
      "path": "api-body-editor.html",
      "properties": [
        {
          "name": "eventsTarget",
          "type": "Object | null | undefined",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_eventsTargetChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_oldEventsTarget",
          "type": "Object | null | undefined",
          "description": "An event target used to attach listeners.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "amfModel",
          "type": "(Object | Array)",
          "description": "Generated AMF json/ld model form the API spec.\nThe element assumes the object of the first array item to be a\ntype of `\"http://raml.org/vocabularies/document#Document`\non AMF vocabulary.\n\nIt is only usefult for the element to resolve references.",
          "privacy": "public",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "ns",
          "type": "Object | null | undefined",
          "description": "A namespace for AMF model",
          "privacy": "public",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 132,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "aware",
          "type": "string | null | undefined",
          "description": "`raml-aware` scope property to use.",
          "privacy": "public",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 45,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "amfBody",
          "type": "Object",
          "description": "AMF json/ld model for body.\nWhen set it resets editor settings and transform it to work with\ndata types defined in AMF only.",
          "privacy": "public",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 52,
              "column": 8
            },
            "end": {
              "line": 54,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_effectiveModel",
          "type": "Object | null | undefined",
          "description": "Computed final model for payload.",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 56,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "hasAmfBody",
          "type": "Object",
          "description": "Computed value, `true` when `amfBody` is set.\nThis controls how the view is rendered. AMF model has limited\nnumber of media types supported by the API. When not existing\nthe edtior renders all possible types.",
          "privacy": "public",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "mimeTypes",
          "type": "Array | null | undefined",
          "description": "List of supported mime types by this endpoint.\nThis information is read from AMF data model.",
          "privacy": "public",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 74,
              "column": 8
            },
            "end": {
              "line": 77,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "singleMimeType",
          "type": "Object",
          "description": "Computed value.\nIt's `true` when the endpint supports single mime type.\nIn this case it won't render type selector.",
          "privacy": "public",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "currentPanel",
          "type": "HTMLElement",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 6
            },
            "end": {
              "line": 248,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "selected",
          "type": "number | null | undefined",
          "description": "Currently selected editor.\n\n- 0 for Raw editor\n- 1 for Form data\n- 2 for Multipart\n- 3 for File",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 10
            },
            "end": {
              "line": 159,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selectedChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "value",
          "type": "(String | FormData | File)",
          "description": "A HTTP body.\n\nDepending of current editor selection the type can vary.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 172,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "contentType",
          "type": "string | null | undefined",
          "description": "When set it attempts to run associated code mirror mode\n(raw editor).\nThis element listens for the `content-type-changed` event and when\nhandled it will automatically update content type and `mode`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 182,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_contentTypeChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "noTextInput",
          "type": "boolean | null | undefined",
          "description": "Computed value, if set then raw text input is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 10
            },
            "end": {
              "line": 184,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "noFormData",
          "type": "boolean | null | undefined",
          "description": "Computed value, if set then form data input is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 186,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "noMultipart",
          "type": "boolean | null | undefined",
          "description": "Computed value, if set then multipart input is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 188,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "noFile",
          "type": "boolean | null | undefined",
          "description": "Computed value, if set then file input is hidden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 10
            },
            "end": {
              "line": 190,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "editorSelectorHidden",
          "type": "boolean | null | undefined",
          "description": "Computed value, true if the editor type selector is hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "allowHideOptional",
          "type": "boolean | null | undefined",
          "description": "If set it computes `hasOptional` property and shows checkbox in the\nform to show / hide optional properties.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_allowHideOptionalChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "allowDisableParams",
          "type": "boolean | null | undefined",
          "description": "If set, enable / disable param checkbox is rendered next to each\nform item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 212,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_allowDisableParamsChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "allowCustom",
          "type": "boolean | null | undefined",
          "description": "When set, renders \"add custom\" item button.\nIf the element is to be used withouth AMF model this should always\nbe enabled. Otherwise users won't be able to add a parameter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 221,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_allowCustomChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "narrow",
          "type": "boolean | null | undefined",
          "description": "Renders items in \"narrow\" view",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 10
            },
            "end": {
              "line": 228,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_narrowChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "When set the editor is in read only mode.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 10
            },
            "end": {
              "line": 235,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_readonlyChanged\"",
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 86,
              "column": 5
            },
            "end": {
              "line": 91,
              "column": 6
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_eventsTargetChanged",
          "description": "Removes old handlers (if any) and attaches listeners on new event\nevent target.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 105,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventsTarget",
              "type": "?Node",
              "description": "Event target to set handlers on. If not set it\nwill set handlers on the `window` object."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 6
            },
            "end": {
              "line": 262,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 264,
              "column": 6
            },
            "end": {
              "line": 267,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getAmfKey",
          "description": "Returns compact model key for given value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 147,
              "column": 4
            },
            "end": {
              "line": 179,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "String",
              "description": "AMF orioginal property"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Compact model property name or the same value if\nvalue not found in the context."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_ensureAmfModel",
          "description": "Ensures that the model is AMF object.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amf",
              "type": "(Object | Array)",
              "description": "AMF json/ld model"
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "API spec"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_ensureArray",
          "description": "Ensures that the value is an array.\nIt returns undefined when there's no value.\nIt returns the same array if the value is already an array.\nIt returns new array of the item is not an array.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 206,
              "column": 4
            },
            "end": {
              "line": 214,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Array | any)",
              "description": "An item to test"
            }
          ],
          "return": {
            "type": "(Array | undefined)"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_getValue",
          "description": "Gets a signle scalar value from a model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 239,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "Amf model to extract the value from."
            },
            {
              "name": "key",
              "type": "String",
              "description": "Model key to search for the value"
            }
          ],
          "return": {
            "type": "any",
            "desc": "Value for key"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_getValueArray",
          "description": "Gets values from a model as an array of `@value` properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 246,
              "column": 4
            },
            "end": {
              "line": 253,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "Amf model to extract the value from."
            },
            {
              "name": "key",
              "type": "String",
              "description": "Model key to search for the value"
            }
          ],
          "return": {
            "type": "Array.<any>",
            "desc": "Value for key"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_hasType",
          "description": "Checks if a model has a type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 260,
              "column": 4
            },
            "end": {
              "line": 272,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "Model to test"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Type name"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if model has a type."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_hasProperty",
          "description": "Checks if a shape has a property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 282,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape",
              "type": "?Object",
              "description": "The shape to test"
            },
            {
              "name": "key",
              "type": "?String",
              "description": "Property name to test"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computePropertyArray",
          "description": "Computes array value of a property in a model (shape).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 290,
              "column": 4
            },
            "end": {
              "line": 300,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape",
              "type": "Object",
              "description": "AMF shape object"
            },
            {
              "name": "key",
              "type": "String",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "(Array.<any> | undefined)"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computePropertyObject",
          "description": "Computes a value of a property in a model (shape).\nIt takes first value of a property, if exists.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 309,
              "column": 4
            },
            "end": {
              "line": 313,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape",
              "type": "Object",
              "description": "AMF shape object"
            },
            {
              "name": "key",
              "type": "String",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "(any | undefined)"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeHasStringValue",
          "description": "Tests if a passed argumet exists.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 320,
              "column": 4
            },
            "end": {
              "line": 322,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | Object | Number)",
              "description": "A value to test"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeHasArrayValue",
          "description": "Computes if passed argument is an array and has a value.\nIt does not check for type or value of the array items.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 329,
              "column": 4
            },
            "end": {
              "line": 331,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Array",
              "description": "Value to test"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeDescription",
          "description": "Computes description for a shape.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 337,
              "column": 4
            },
            "end": {
              "line": 339,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape",
              "type": "Object",
              "description": "AMF shape"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Description value."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeHeaders",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 343,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape"
            }
          ],
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeQueryParameters",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 345,
              "column": 4
            },
            "end": {
              "line": 347,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape"
            }
          ],
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeResponses",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 349,
              "column": 4
            },
            "end": {
              "line": 351,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape"
            }
          ],
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeApiVersion",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 353,
              "column": 4
            },
            "end": {
              "line": 360,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amfModel"
            }
          ],
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeServerVariables",
          "description": "Computes value for `serverVariables` property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 368,
              "column": 4
            },
            "end": {
              "line": 370,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "server",
              "type": "Object",
              "description": "AMF API model for Server."
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)",
            "desc": "Variables if defined."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeEndpointVariables",
          "description": "Computes value for `endpointVariables` property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 377,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "endpoint",
              "type": "Object",
              "description": "Endpoint model"
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)",
            "desc": "Parameters if defined."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computePayload",
          "description": "Computes value for the `payload` property",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 386,
              "column": 4
            },
            "end": {
              "line": 388,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expects",
              "type": "Object",
              "description": "Current value of `expects` property."
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)",
            "desc": "Payload model if defined."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeReturns",
          "description": "Computes value for `returns` property",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 395,
              "column": 4
            },
            "end": {
              "line": 397,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method",
              "type": "Object",
              "description": "AMF `supportedOperation` model"
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeSecurity",
          "description": "Computes value for `security` property",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 404,
              "column": 4
            },
            "end": {
              "line": 406,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method",
              "type": "Object",
              "description": "AMF `supportedOperation` model"
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeHasCustomProperties",
          "description": "Computes value for `hasCustomProperties` property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 413,
              "column": 4
            },
            "end": {
              "line": 415,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape",
              "type": "Object",
              "description": "AMF `supportedOperation` model"
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeEncodes",
          "description": "Computes model's `encodes` property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 422,
              "column": 4
            },
            "end": {
              "line": 434,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "?Object",
              "description": "AMF data model"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "List of encodes"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeDeclares",
          "description": "Computes list of declarations in the AMF api model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 441,
              "column": 4
            },
            "end": {
              "line": 454,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "(Array | Object)",
              "description": "AMF json/ld model for an API"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "List of declarations"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeReferences",
          "description": "Computes list of references in the AMF api model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 461,
              "column": 4
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "(Array | Object)",
              "description": "AMF json/ld model for an API"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "List of declarations"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeWebApi",
          "description": "Computes AMF's `http://schema.org/WebAPI` model",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 481,
              "column": 4
            },
            "end": {
              "line": 489,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "(Array | Object)",
              "description": "AMF json/ld model for an API"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Web API declaration."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeServer",
          "description": "Computes value for `server` property that is later used with other computations.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 496,
              "column": 4
            },
            "end": {
              "line": 504,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "(Array | Object)",
              "description": "AMF model for an API"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The server model"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeEndpointUri",
          "description": "Computes endpoint's URI based on `amfModel` and `endpoint` models.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 514,
              "column": 4
            },
            "end": {
              "line": 526,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "server",
              "type": "Object",
              "description": "Server model of AMF API."
            },
            {
              "name": "endpoint",
              "type": "Object",
              "description": "Endpoint model"
            },
            {
              "name": "baseUri",
              "type": "?String",
              "description": "Current value of `baseUri` property"
            },
            {
              "name": "version",
              "type": "?String",
              "description": "API current version"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Endpoint's URI"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_getBaseUri",
          "description": "Computes base URI value from either `baseUri`, `iron-meta` with\n`ApiBaseUri` key or `amfModel` value (in this order).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 536,
              "column": 4
            },
            "end": {
              "line": 547,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "baseUri",
              "type": "String",
              "description": "Value of `baseUri` property"
            },
            {
              "name": "server",
              "type": "Object",
              "description": "AMF API model for Server."
            },
            {
              "name": "protocols",
              "type": "?Array.<String>",
              "description": "List of supported protocols"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Base uri value. Can be empty string."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_getAmfBaseUri",
          "description": "Computes base URI from AMF model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 557,
              "column": 4
            },
            "end": {
              "line": 561,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "server",
              "type": "Object",
              "description": "AMF API model for Server."
            },
            {
              "name": "protocols",
              "type": "?Array.<String>",
              "description": "Listy of supporte dprotocols. If not\nprovided and required to compute the url it uses `amfModel` to compute\nprotocols"
            }
          ],
          "return": {
            "type": "(String | undefined)",
            "desc": "Base uri value if exists."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_ensureUrlScheme",
          "description": "A function that makes sure that the URL has a scheme definition.\nIf no supported protocols information is available it assumes `http`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 573,
              "column": 4
            },
            "end": {
              "line": 587,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "A url value"
            },
            {
              "name": "protocols",
              "type": "?Array.<String>",
              "description": "List of supported by the API protocols\nAn array of string like: `['HTTP', 'HTTPS']`. It lowercase the value.\nIf not set it tries to read supported protocols value from `amfModel`\nproperty."
            }
          ],
          "return": {
            "type": "String",
            "desc": "Url with scheme."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeProtocols",
          "description": "Computes supported protocols by the API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 594,
              "column": 4
            },
            "end": {
              "line": 600,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "(Object | Array)",
              "description": "AMF data model"
            }
          ],
          "return": {
            "type": "(Array.<String> | undefined)"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeExpects",
          "description": "Computes value for the `expects` property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 607,
              "column": 4
            },
            "end": {
              "line": 615,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "method",
              "type": "Object",
              "description": "AMF `supportedOperation` model"
            }
          ],
          "return": {
            "type": "Object"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computePropertyValue",
          "description": "Tries to find an example value (whether it's default value or from an\nexample) to put it into snippet's values.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 623,
              "column": 4
            },
            "end": {
              "line": 641,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "A http://raml.org/vocabularies/http#Parameter property"
            }
          ],
          "return": {
            "type": "(String | undefined)"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeEndpoints",
          "description": "Computes list of endpoints from a WebApi model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 647,
              "column": 4
            },
            "end": {
              "line": 653,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "webApi",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Always returns an array of endpoints."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeEndpointModel",
          "description": "Computes model for an endpoint documentation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 661,
              "column": 4
            },
            "end": {
              "line": 664,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "webApi",
              "type": "Object",
              "description": "Current value of `webApi` property"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Selected shape ID"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "An endponit definition"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeEndpointByPath",
          "description": "Computes model for an endpoint documentation using it's path.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 672,
              "column": 4
            },
            "end": {
              "line": 683,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "webApi",
              "type": "Object",
              "description": "Current value of `webApi` property"
            },
            {
              "name": "path",
              "type": "String",
              "description": "Endpoint path"
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "An endponit definition"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeMethodModel",
          "description": "Computes method for the method documentation.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 691,
              "column": 4
            },
            "end": {
              "line": 697,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "webApi",
              "type": "Object",
              "description": "Current value of `webApi` property"
            },
            {
              "name": "selected",
              "type": "String",
              "description": "Selected shape"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "A method definition"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeOperations",
          "description": "Computes list of operations in an endpoint",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 704,
              "column": 4
            },
            "end": {
              "line": 711,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "webApi",
              "type": "Object",
              "description": "The WebApi AMF model"
            },
            {
              "name": "id",
              "type": "String",
              "description": "Endpoint ID"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "List of SupportedOperation objects"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeMethodEndpoint",
          "description": "Computes an endpoint for a method.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 718,
              "column": 4
            },
            "end": {
              "line": 739,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "webApi",
              "type": "Object",
              "description": "The WebApi AMF model"
            },
            {
              "name": "methodId",
              "type": "String",
              "description": "Method id"
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "An endpoint model of undefined."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "__computeMethodsListForMethod",
          "description": "Computes a list of methods for an endpoint that contains a method with\ngiven id.",
          "privacy": "private",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 748,
              "column": 4
            },
            "end": {
              "line": 755,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "webApi",
              "type": "Object",
              "description": "WebApi model"
            },
            {
              "name": "methodId",
              "type": "String",
              "description": "Method id."
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)",
            "desc": "A list of sibling methods or undefined."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeType",
          "description": "Computes a type documentation model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 764,
              "column": 4
            },
            "end": {
              "line": 781,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "declares",
              "type": "Array",
              "description": "Current value of `declares` property"
            },
            {
              "name": "references",
              "type": "?Array",
              "description": "Current value of `references` property"
            },
            {
              "name": "selected",
              "type": "String",
              "description": "Selected shape"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "A type definition"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeReferenceType",
          "description": "Computes a type model from a reference (library for example).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 788,
              "column": 4
            },
            "end": {
              "line": 803,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "reference",
              "type": "(Object | Array)",
              "description": "AMF model for a reference to extract the data from"
            },
            {
              "name": "selected",
              "type": "String",
              "description": "Node ID to look for"
            }
          ],
          "return": {
            "type": "(Object | undefined)",
            "desc": "Type definition or undefined if not found."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeSecurityModel",
          "description": "Computes model for selected security definition.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 811,
              "column": 4
            },
            "end": {
              "line": 816,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "declares",
              "type": "Array",
              "description": "Current value of `declares` property"
            },
            {
              "name": "selected",
              "type": "String",
              "description": "Selected shape"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "A security definition"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeDocument",
          "description": "Computes a documentation model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 824,
              "column": 4
            },
            "end": {
              "line": 831,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "webApi",
              "type": "Object",
              "description": "Current value of `webApi` property"
            },
            {
              "name": "selected",
              "type": "String",
              "description": "Selected shape"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "A method definition"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_resolve",
          "description": "Resolves a reference to an external fragment.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 838,
              "column": 4
            },
            "end": {
              "line": 887,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape",
              "type": "Object",
              "description": "A shape to resolve"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Resolved shape."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_getLinkTarget",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 889,
              "column": 4
            },
            "end": {
              "line": 911,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amf"
            },
            {
              "name": "id"
            }
          ],
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_getReferenceId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 913,
              "column": 4
            },
            "end": {
              "line": 932,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amf"
            },
            {
              "name": "id"
            }
          ],
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_resolveRecursive",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 934,
              "column": 4
            },
            "end": {
              "line": 945,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "shape"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_getExampleValue",
          "description": "Gets string value for an example data model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 954,
              "column": 4
            },
            "end": {
              "line": 967,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Example item model"
            },
            {
              "name": "isJson",
              "type": "Boolean",
              "description": "If set it checks if the `raw` value is valid JSON.\nIf it isn't then it parses structured value."
            }
          ],
          "return": {
            "type": "String"
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeExampleFromStructuredValue",
          "description": "Computes an example from example structured value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 974,
              "column": 4
            },
            "end": {
              "line": 995,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "`structuredValue` item model."
            }
          ],
          "return": {
            "type": "(Object | Array)",
            "desc": "Javascript object or array with structured value."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeStructuredExampleValue",
          "description": "Computes value with propert data type for a structured example.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 1001,
              "column": 4
            },
            "end": {
              "line": 1027,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object",
              "description": "Structured example item model."
            }
          ],
          "return": {
            "type": "(String | Boolean | Number)",
            "desc": "Value for the example."
          },
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "_computeHasAmf",
          "description": "Computes value for `hasAmfBody`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "amf",
              "type": "?Object",
              "description": "AMF model for body."
            }
          ],
          "return": {
            "type": "Boolean"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_clearAmfSettings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_amfChanged",
          "description": "Creates a debouncer for body change action so it can be sure that\n`amfModel` and `amfBody` properties are set.\n\nAfter debouncer timeout `__amfChanged()` is called with current value of\n`amfBody`",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 128,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "__amfChanged",
          "description": "A handler for `amfBody` property change.\nResets `mediaTypes` property as defined in the model.",
          "privacy": "private",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "bodyShape",
              "type": "(Array | Object)",
              "description": "Passed model"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_ensurePayloadModel",
          "description": "Ensures that the passed model is an array of\n`http://raml.org/vocabularies/http#Payload`\nin the AMF vocabulary.\nThe element accepts `http://www.w3.org/ns/hydra/core#Operation`,\n`http://raml.org/vocabularies/http#Request` or array of\n`http://raml.org/vocabularies/http#Payload` definitions.\nIt selectes the array from the model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "(Array | Object)",
              "description": "Passed model"
            }
          ],
          "return": {
            "type": "(Array | undefined)",
            "desc": "Payload model of undefined if the model\nis invalid for this element."
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_updateAmfMediaTypes",
          "description": "Creates a list of media types supported by the endpoint as defined in\nAPI spec file.",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 204,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Array",
              "description": "List of `Payload` definitions"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_selectDefaultMediaType",
          "description": "Sets a content type property based on AMF mode's available options.\nIt sets the first defined media type in the model.\n\nThis function **always** triggers the change by clearing `contentType`\nfirst and then assigning new value.\n\nIf the AMF model is a file model then it sets `fileAccept` property",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 216,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Array",
              "description": "List of `Payload` definitions"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_updatePanelAmf",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 244,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasAmfBody"
            },
            {
              "name": "contentType"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_schemaForMedia",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 260,
              "column": 4
            },
            "end": {
              "line": 284,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mediaType"
            }
          ],
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_typeHasModel",
          "description": "Tests if the panel that supports given content-type supports data model.\nXML and JSON do not use view data model to render the view.",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 291,
              "column": 4
            },
            "end": {
              "line": 294,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType",
              "type": "String",
              "description": "A content type value to test"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the content type's panel support data model"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_updatePanelModel",
          "description": "Updates view model on panels that support the model.",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 303,
              "column": 4
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "panel",
              "type": "HTMLElement",
              "description": "Current panel"
            },
            {
              "name": "contentType",
              "type": "String",
              "description": "Current content type"
            },
            {
              "name": "schema",
              "type": "Object",
              "description": "A schema for current payload."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_getUnionObjectProperties",
          "description": "To simplify things, this searches for first **object** from the union type\ndefinition and returns its properties.\n\nThe component do not offer an UI to selected union type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 331,
              "column": 4
            },
            "end": {
              "line": 351,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "schema",
              "type": "Object",
              "description": "Payload's schema definition"
            }
          ],
          "return": {
            "type": "(Array.<Object> | undefined)",
            "desc": "Properies of first object, if any."
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_updatePanelValue",
          "description": "Updates panel value depending on examples or type schema availability.",
          "privacy": "protected",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 368,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "panel",
              "type": "HTMLElement",
              "description": "Current panel"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Current content type"
            },
            {
              "name": "schema",
              "type": "Object",
              "description": "A schema for current payload."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "_contentTypeHandler",
          "description": "Handler for content type changed event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 6
            },
            "end": {
              "line": 277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_contentTypeChanged",
          "description": "Handler for content type change.\nUpdates state of the UI depending on AMF model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 6
            },
            "end": {
              "line": 289,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType",
              "type": "String",
              "description": "New content type value."
            },
            {
              "name": "oldValue",
              "type": "String",
              "description": "Previous value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hideAllEditors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 6
            },
            "end": {
              "line": 296,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_renderAllEditors",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 298,
              "column": 6
            },
            "end": {
              "line": 303,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateEditorsState",
          "description": "Updates editors availability state depending on content type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 343,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType",
              "type": "String",
              "description": "New content type value."
            },
            {
              "name": "oldValue",
              "type": "String",
              "description": "Previous value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectedChanged",
          "description": "Replaces active body editor with new one.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 6
            },
            "end": {
              "line": 360,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected",
              "type": "Number"
            },
            {
              "name": "oldValue",
              "type": "Number"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_notifyBodyChanged",
          "description": "Notifies application about body change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 6
            },
            "end": {
              "line": 378,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | FormData | File | undefined)",
              "description": "Value to notify"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__removeExistingPanel",
          "description": "Removes any existing body panel from local DOM.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 6
            },
            "end": {
              "line": 396,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__createBodyPanel",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 6
            },
            "end": {
              "line": 406,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__addCommonProperties",
          "description": "Adds shared properties for all panels.",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 413,
              "column": 6
            },
            "end": {
              "line": 422,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "panel",
              "type": "HTMLElement"
            },
            {
              "name": "type",
              "type": "String",
              "description": "Body type."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createRawPanel",
          "description": "Creates instance of Raw body panel and adds it to local DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 6
            },
            "end": {
              "line": 430,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createFormDataPanel",
          "description": "Creates instance of Raw body panel and adds it to local DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 434,
              "column": 6
            },
            "end": {
              "line": 438,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createFilePanel",
          "description": "Creates instance of Raw body panel and adds it to local DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 442,
              "column": 6
            },
            "end": {
              "line": 446,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createMultipartPanel",
          "description": "Creates instance of Raw body panel and adds it to local DOM.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 450,
              "column": 6
            },
            "end": {
              "line": 454,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_panelValueChanged",
          "description": "Handler for the `value-changed` event dispatched by an editor panel.\nUpdates this element value reported back to the application and\ndispatches `body-value-changed` custom event so elements without\ndirect access to this element can use this information.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 6
            },
            "end": {
              "line": 471,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_attachValues",
          "description": "Attaches value and value change listeners to current editor\nafter it's created.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 476,
              "column": 6
            },
            "end": {
              "line": 484,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_analyticsEvent",
          "description": "Dispatches analytics event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 492,
              "column": 6
            },
            "end": {
              "line": 504,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "category",
              "type": "String",
              "description": "Event category"
            },
            {
              "name": "action",
              "type": "String",
              "description": "Event action"
            },
            {
              "name": "label",
              "type": "String",
              "description": "Event label"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_payloadKeyDown",
          "description": "Dispatches `send-request` custom event when the user pressed\n`meta+enter` on Mac or `ctrl+enter` eklsewhere keys combination.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 511,
              "column": 6
            },
            "end": {
              "line": 524,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateEditorSelectorHidden",
          "description": "Computes a value of the hidden attribute of the editory type selector.\nSome content types are supported by only one type of the editor so in\nthis cases the editor should be hidden.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 532,
              "column": 6
            },
            "end": {
              "line": 549,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "contentType",
              "type": "String",
              "description": "Current content type."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_propertyChangeHandler",
          "description": "Updates property value on current panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 556,
              "column": 6
            },
            "end": {
              "line": 562,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "String",
              "description": "Name of the proeprty to set"
            },
            {
              "name": "value",
              "type": "any",
              "description": "New value to set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "Updates value of the panel if `value` change and it is not\ninternal change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 569,
              "column": 6
            },
            "end": {
              "line": 574,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | FormData | File)",
              "description": "New value to set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_allowHideOptionalChanged",
          "description": "Updates `allowHideOptional` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 580,
              "column": 6
            },
            "end": {
              "line": 582,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_allowDisableParamsChanged",
          "description": "Updates `allowDisableParams` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 588,
              "column": 6
            },
            "end": {
              "line": 590,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_allowCustomChanged",
          "description": "Updates `allowCustom` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 596,
              "column": 6
            },
            "end": {
              "line": 598,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_narrowChanged",
          "description": "Updates `narrow` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 604,
              "column": 6
            },
            "end": {
              "line": 606,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_readonlyChanged",
          "description": "Updates `readonly` on a panel.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 612,
              "column": 6
            },
            "end": {
              "line": 614,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Boolean",
              "description": "New value to set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_copyToClipboard",
          "description": "Copies current body text value to clipboard.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 620,
              "column": 6
            },
            "end": {
              "line": 641,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resetCopyButtonState",
          "description": "Resets state of the copy button.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 6
            },
            "end": {
              "line": 648,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "button",
              "type": "Element"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_notifyContentTypeChange",
          "description": "Dispatches `content-type-changed` custom event when CT changes by\nusing type selection.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 654,
              "column": 6
            },
            "end": {
              "line": 665,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Content type value to announce."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_typeSelectedChanged",
          "description": "Notifies about content type change when type selection changes.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 670,
              "column": 6
            },
            "end": {
              "line": 675,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 694,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ApiBodyEditor",
      "attributes": [
        {
          "name": "events-target",
          "description": "Events handlers target. By default the element listens on\n`window` object. If set, all events listeners will be attached to this\nobject instead of `window`.",
          "sourceRange": {
            "file": "../events-target-behavior/events-target-behavior.html",
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "ArcBehaviors.EventsTargetBehavior"
        },
        {
          "name": "amf-model",
          "description": "Generated AMF json/ld model form the API spec.\nThe element assumes the object of the first array item to be a\ntype of `\"http://raml.org/vocabularies/document#Document`\non AMF vocabulary.\n\nIt is only usefult for the element to resolve references.",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 128,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 32
            }
          },
          "metadata": {},
          "type": "(Object | Array)",
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "ns",
          "description": "A namespace for AMF model",
          "sourceRange": {
            "file": "../amf-helper-mixin/amf-helper-mixin.html",
            "start": {
              "line": 132,
              "column": 8
            },
            "end": {
              "line": 138,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "ApiElements.AmfHelperMixin"
        },
        {
          "name": "aware",
          "description": "`raml-aware` scope property to use.",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 45,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 21
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "amf-body",
          "description": "AMF json/ld model for body.\nWhen set it resets editor settings and transform it to work with\ndata types defined in AMF only.",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 52,
              "column": 8
            },
            "end": {
              "line": 54,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "has-amf-body",
          "description": "Computed value, `true` when `amfBody` is set.\nThis controls how the view is rendered. AMF model has limited\nnumber of media types supported by the API. When not existing\nthe edtior renders all possible types.",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 69,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "mime-types",
          "description": "List of supported mime types by this endpoint.\nThis information is read from AMF data model.",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 74,
              "column": 8
            },
            "end": {
              "line": 77,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "single-mime-type",
          "description": "Computed value.\nIt's `true` when the endpint supports single mime type.\nIn this case it won't render type selector.",
          "sourceRange": {
            "file": "api-body-editor-amf-overlay.html",
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object",
          "inheritedFrom": "ApiElements.ApiBodyEditorAmfOverlay"
        },
        {
          "name": "selected",
          "description": "Currently selected editor.\n\n- 0 for Raw editor\n- 1 for Form data\n- 2 for Multipart\n- 3 for File",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 10
            },
            "end": {
              "line": 159,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "value",
          "description": "A HTTP body.\n\nDepending of current editor selection the type can vary.",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 10
            },
            "end": {
              "line": 172,
              "column": 11
            }
          },
          "metadata": {},
          "type": "(String | FormData | File)"
        },
        {
          "name": "content-type",
          "description": "When set it attempts to run associated code mirror mode\n(raw editor).\nThis element listens for the `content-type-changed` event and when\nhandled it will automatically update content type and `mode`.",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 10
            },
            "end": {
              "line": 182,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "no-text-input",
          "description": "Computed value, if set then raw text input is hidden",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 10
            },
            "end": {
              "line": 184,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-form-data",
          "description": "Computed value, if set then form data input is hidden",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 10
            },
            "end": {
              "line": 186,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-multipart",
          "description": "Computed value, if set then multipart input is hidden",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 10
            },
            "end": {
              "line": 188,
              "column": 30
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-file",
          "description": "Computed value, if set then file input is hidden",
          "sourceRange": {
            "start": {
              "line": 190,
              "column": 10
            },
            "end": {
              "line": 190,
              "column": 25
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "editor-selector-hidden",
          "description": "Computed value, true if the editor type selector is hidden.",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 10
            },
            "end": {
              "line": 196,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "allow-hide-optional",
          "description": "If set it computes `hasOptional` property and shows checkbox in the\nform to show / hide optional properties.",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 10
            },
            "end": {
              "line": 204,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "allow-disable-params",
          "description": "If set, enable / disable param checkbox is rendered next to each\nform item.",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 10
            },
            "end": {
              "line": 212,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "allow-custom",
          "description": "When set, renders \"add custom\" item button.\nIf the element is to be used withouth AMF model this should always\nbe enabled. Otherwise users won't be able to add a parameter.",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 10
            },
            "end": {
              "line": 221,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "narrow",
          "description": "Renders items in \"narrow\" view",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 10
            },
            "end": {
              "line": 228,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "readonly",
          "description": "When set the editor is in read only mode.",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 10
            },
            "end": {
              "line": 235,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "body-value-changed",
          "description": "Fires when the value change.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "content-type-changed",
          "description": "Dispatched when the user select media type from the list of available types.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "send-request",
          "description": "Dispatched when the request should be invoked.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "api-body-editor",
      "mixins": [
        "ArcBehaviors.EventsTargetBehavior",
        "ApiElements.AmfHelperMixin",
        "ApiElements.ApiBodyEditorAmfOverlay"
      ]
    }
  ]
}
